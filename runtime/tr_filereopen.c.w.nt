/*============================================================================
	E D I S E R V E R   T R A N S L A T O R

	File:		tr_filereopen.c
	Programmer:	Mikko Valimaki (MV)
	Date:		Sat Oct 10 08:25:51 EET 1992

	Copyright (c) 1992 Telecom Finland/EDI Operations
============================================================================*/
#include "conf/local_config.h"
MODULE("@(#)TradeXpress $Id: tr_filereopen  3.05 (27.03.97/MV,JN) $")
/*LIBRARY(libruntime_version)
*/
/*============================================================================
  Record all changes here and update the above string accordingly.
  3.00 12.01.93/MV	Created.
  3.01 30.01.97/JN	Making sure we get what we want (0, 1 or 2).
  3.02 13.02.97/JN	close&open just does not work on NT.
  3.03 19.02.97/JN	More of this.
  3.04 11.03.97/JN	Now clearing the noclose bit from handle.
  3.05 27.03.97/JN	Included by tr_filereopen.c on NT.
			This is not correct yet, but seems to work for
			regular files at least.
============================================================================*/

#include <stdio.h>

#include <io.h>
#include <fcntl.h>

#include "tr_strings.h"
#include "tr_prototypes.h"

extern int errno;

extern int tr_unBufferedOutput;

FILE *tr_fopen();
FILE *tr_popen();

static int wasprocess[3];

#define isprocess(s) (*(s) == '|')

static char *what[] = {
	"INPUT",
	"OUTPUT",
	"LOGGING",
};


static int designator[] = {
	STD_INPUT_HANDLE,
	STD_OUTPUT_HANDLE,
	STD_ERROR_HANDLE,
};
#define NULLFILE "NUL"

/*=========================================================================
=========================================================================*/

int
tr_FileReopen(char *filename, FILE *fp)
{
	FILE *ofp;
	int fd, nfd;
	int INPUT;       /* INPUT or not */
	int error = 0;
	HANDLE h;
#define PICKY getenv("BARF_ABOUT_REDIRECT_ANOMALIES")

	/*
	 *  Can specify 0, EMPTY or "/dev/null" for bitbucket on
	 *  both Unix and nt.
	 *  "NUL" is just fine filename on Unix, not included here;
	 *  Works as expected on nt, anyway.
	 */

	if (!filename
	 || !filename[0]
	 || !strcmp(filename, "/dev/null"))
		filename = NULLFILE;

	ofp = fp;

	if (!fp) {
		fprintf(stderr, "Null fp for redirect() !\n");
		fflush(NULL);
		*(int *) 0 = 0;
	}
	if (fp == stdin) {
		fd = 0;
		INPUT = 1;
	} else {
		INPUT = 0;
		if (fp == stdout) {
			fd = 1;
		} else if (fp == stderr) {
			fd = 2;
		} else {
			tr_Fatal(TR_FATAL_ILLEGAL_SYS_FILE, fileno(fp));
		}
		fflush(fp);
	}

	/*
	 *  Clear the noclose bit from this handle,
	 *  it seems that some handles have it set sometimes (hah).
	 */

	nfd = _fileno(fp);

	if ( nfd != fd )
		if (PICKY)
			fprintf( stderr, "Warning: Different filehandles, stream=%d expected=%d\n",
				nfd, fd );



	h = _get_osfhandle(nfd);
	nfd = 0;
	if ( h == INVALID_HANDLE_VALUE ) {
		if (PICKY)
		fprintf(stderr, "Warning: _get_osfhandle 2 error %d\n",
			GetLastError());
	}
	else {
		if (!SetHandleInformation(h, HANDLE_FLAG_PROTECT_FROM_CLOSE, 0)) {
			if (PICKY)
			fprintf(stderr, "Warning: SetHandleInformation 1 error %d\n",
				GetLastError());
		}
	}


	/*
	 *  First close the file descriptor.
	 */
	if (wasprocess[fd]) {
		if (tr_pclose(fp))
			if (PICKY)
			fprintf(stderr, "Warning: pclose error %d\n",
				GetLastError());
	} else {

#if 0 
		if (h != INVALID_HANDLE_VALUE && !CloseHandle(h))
			if (PICKY)
			fprintf(stderr, "CloseHandle error %d\n",
				GetLastError());
#endif
		if (tr_fclose(fp))
			if (PICKY)
			fprintf(stderr, "Warning: fclose error %d\n",
				GetLastError());
	}

#if 1
	if (_close(fd)) {
		if (PICKY)
		fprintf(stderr, "Warning: close 1 error %d\n", errno);
	}
	else
		if (PICKY)
		fprintf(stderr, "Info: Close succeded\n");
#endif

	/*
	 *  Come here again if open fails,
	 *  and use the NULLFILE.
	 */
redo:

	/*
	 *  Open a new descriptor.  Here we count on
	 *  the system returning always the smallest
	 *  file descriptor.
	 *  This is why we have to make sure that the
	 *  files are always open.
	 */
	if (wasprocess[fd] = isprocess(filename)) {
		fp = tr_popen(filename + 1, INPUT ? "r" : "w");
		if (fp) {
			nfd = fileno(fp);
			h = (HANDLE) _get_osfhandle(nfd);
			if ((long) h == -1)
				fprintf(stderr, "Warning: get_osfhandle error %d\n",
					GetLastError());

			if (!SetStdHandle(designator[fd], h))
				fprintf(stderr, "Warning: SetStdHandle error %d\n",
					GetLastError());

			if (!SetHandleInformation(h,
					HANDLE_FLAG_INHERIT | HANDLE_FLAG_PROTECT_FROM_CLOSE,
					HANDLE_FLAG_INHERIT))
				fprintf(stderr, "Warning: SetHandleInformation 2 error %d\n",
					GetLastError());

			if (fp != ofp) {
				*ofp = *fp;  /* BRRH */
				fp = ofp;
			}
		}
	} else {
		fp = tr_fopen(filename, INPUT ? "r" : "a");
		if (fp) {
			nfd = _fileno(fp);
			h = (HANDLE)_get_osfhandle(nfd);
#if 0
			nfd = _open_osfhandle((long) h, _O_TEXT | (INPUT ? _O_RDONLY : _O_APPEND));
#endif
			if (h == INVALID_HANDLE_VALUE)
					fprintf(stderr, "Warning: _get_osfhandle error %d\n",
						GetLastError());

			
			if (!SetStdHandle(designator[fd], h))
					fprintf(stderr, "Warning: SetStdHandle error %d\n",
						GetLastError());

			if (!SetHandleInformation(h,
					HANDLE_FLAG_INHERIT | HANDLE_FLAG_PROTECT_FROM_CLOSE,
					HANDLE_FLAG_INHERIT))
				fprintf(stderr, "Warning: SetHandleInformation 2 error %d\n",
					GetLastError());

			if (nfd != fd) {
				if (_dup2(nfd, fd))
					fprintf(stderr, "Warning: dup2 error %d\n",
						GetLastError());
				if (close(nfd))
					fprintf(stderr, "Warning: close error %d\n",
						GetLastError());
			}
			*ofp = *fp; /* BRRH */
			fp = ofp;
		}
	}
	if (!error && !fp) {
		error = errno ? errno : -1;
		tr_Log(TR_WARN_REOPEN_FAILED, fd, filename, error);
		filename = NULLFILE;
		goto redo;
	}

	if (GetStdHandle(designator[fd]) != (HANDLE) _get_osfhandle(fd))
		fprintf(stderr, "Warning: redirect %s got different HANDLE\n",
			what[fd]);
	if (_fileno(fp) != fd) {
		/*
		 * 02.06.99/KP : Changed fprintf -> tr_Log
		 * fprintf(stderr, "Warning: redirect %s got %d, expected %d\n",
		 *	what[fd], fileno(fp), fd);
		 */
		 tr_Log("Redirect %s got %d, expected %d\n",
		 	what[fd], fileno(fp), fd);
	}
	if (ofp != fp)
		fprintf(stderr, "Warning: redirect %s got different FILE\n",
			what[fd]);

	/*
	 *  If this is output and we want no buffering
	 *  then set the buffer to NULL.
	 */
	if (!INPUT && !error && tr_unBufferedOutput)
		setbuf(fp, NULL);

	return (error);
}

